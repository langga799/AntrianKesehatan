package com.example.antriankesehatan.ui.scheduleimport android.os.Parcelimport android.os.Parcelable.Creatorimport com.google.android.material.datepicker.CalendarConstraints.DateValidatorimport java.util.*import kotlin.collections.ArrayListclass MondaysOutValidator() : DateValidator {    var mYear: Int = 0    var mMonth: Int = 0    var mDayOfWeek: Int = 0    constructor(parcel: Parcel) : this() {        mYear = parcel.readInt()        mMonth = parcel.readInt()        mDayOfWeek = parcel.readInt()    }    override fun isValid(date: Long): Boolean {        val allXDayOfMonth = getAllXDayOfMonth(mYear, mMonth, mDayOfWeek)        var isValidDays = false        for (xDay in allXDayOfMonth) {            val calendarStart: Calendar = Calendar.getInstance()            val calendarEnd: Calendar = Calendar.getInstance()            val minDate: ArrayList<Long> = ArrayList()            val maxDate: ArrayList<Long> = ArrayList()            calendarStart.set(mYear, mMonth, xDay - 1)            calendarEnd.set(mYear, mMonth, xDay)            minDate.add(calendarStart.timeInMillis)            maxDate.add(calendarEnd.timeInMillis)            isValidDays = isValidDays || !(minDate[0] > date || maxDate[0] < date)        }        return !isValidDays    }    override fun describeContents(): Int {        return 0    }    override fun writeToParcel(dest: Parcel, flags: Int) {        dest.writeInt(mYear)        dest.writeInt(mMonth)        dest.writeInt(mDayOfWeek)    }    companion object {        private fun getFirstXDayOfMonth(year: Int, month: Int, dayOfWeek: Int): Int {            val cacheCalendar: Calendar = Calendar.getInstance()            cacheCalendar.set(Calendar.DAY_OF_WEEK, dayOfWeek)            cacheCalendar.set(Calendar.DAY_OF_WEEK_IN_MONTH, 1)            cacheCalendar.set(Calendar.MONTH, month)            cacheCalendar.set(Calendar.YEAR, year)            return cacheCalendar.get(Calendar.DATE)        }        private fun getAllXDayOfMonth(year: Int, month: Int, dayOfWeek: Int): List<Int> {            val ONE_WEEK = 7            val firstDay = getFirstXDayOfMonth(year, month, dayOfWeek)            val xDays: MutableList<Int> = ArrayList()            xDays.add(firstDay)            val calendar: Calendar = GregorianCalendar(year, month, firstDay)            calendar.add(Calendar.DAY_OF_MONTH, ONE_WEEK) // adding 1 Week            while (calendar.get(Calendar.MONTH) === month) {                xDays.add(calendar.get(Calendar.DAY_OF_MONTH))                calendar.add(Calendar.DAY_OF_MONTH, ONE_WEEK) // adding 1 Week            }            return xDays        }        val CREATOR: Creator<MondaysOutValidator?> = object : Creator<MondaysOutValidator?> {            override fun createFromParcel(parcel: Parcel): MondaysOutValidator? {                return MondaysOutValidator(parcel)            }            override fun newArray(size: Int): Array<MondaysOutValidator?> {                return arrayOfNulls(size)            }        }    }     object CREATOR : Creator<MondaysOutValidator> {        override fun createFromParcel(parcel: Parcel): MondaysOutValidator {            return MondaysOutValidator(parcel)        }        override fun newArray(size: Int): Array<MondaysOutValidator?> {            return arrayOfNulls(size)        }    }}