package com.example.antriankesehatan.alarmManagerimport android.app.NotificationChannelimport android.app.NotificationManagerimport android.content.Contextimport android.os.Buildimport android.util.Logimport androidx.core.app.NotificationCompatimport androidx.work.Workerimport androidx.work.WorkerParametersimport com.example.antriankesehatan.Rimport com.pusher.client.Pusherimport com.pusher.client.PusherOptionsimport org.json.JSONObjectclass MyWorker(context: Context, workerParameters: WorkerParameters) :    Worker(context, workerParameters) {    companion object {        private val TAG = MyWorker::class.java.simpleName        const val APP_ID = "YOUR_KEY_HERE"        const val EXTRA_CITY = "city"        const val NOTIFICATION_ID = 1        const val CHANNEL_ID = "channel_01"        const val CHANNEL_NAME = "antrian_kesehatan"        private const val APP_CLUSTER = "mt1"        private const val APP_KEY = "1045a4cd84dc5ec8c88b"    }    //  private    override fun doWork(): Result {        getNotification()        Log.d("DATA_WORK", "RUNNING")        return Result.success()    }    private fun getNotification(): kotlin.Result.Companion {        val resultStatus = Result        val option = PusherOptions()        option.setCluster(APP_CLUSTER)        val pusher = Pusher(APP_KEY, option)        pusher.connect()        val channel = pusher.subscribe("broadcast")        channel.bind("berita-info") { event ->            Log.d("EVENT_PUSHER", event.data + " : " + event.eventName + " : " + event.channelName)            if (event.data != null) {                val jsonString = JSONObject(event.data)                val title = jsonString.getString("title")                val body = jsonString.getString("body")                Log.d("DATA_WORK", title + body)                showNotification(title, body)                resultStatus.success(event.data)            } else {                resultStatus.failure(Throwable())            }        }        return resultStatus    }    private fun showNotification(title: String, description: String?) {        val notificationManager =            applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager        val notification: NotificationCompat.Builder =            NotificationCompat.Builder(applicationContext, CHANNEL_ID)                .setSmallIcon(R.drawable.ic_doctor)                .setContentTitle(title)                .setContentText(description)                .setAutoCancel(true)                .setPriority(NotificationCompat.PRIORITY_HIGH)                .setDefaults(NotificationCompat.DEFAULT_ALL)        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            val channel =                NotificationChannel(CHANNEL_ID, CHANNEL_NAME, NotificationManager.IMPORTANCE_HIGH)            notification.setChannelId(CHANNEL_ID)            notificationManager.createNotificationChannel(channel)        }        notificationManager.notify(NOTIFICATION_ID, notification.build())    }}