package com.example.antriankesehatan.pusherimport android.app.NotificationChannelimport android.app.NotificationManagerimport android.content.Contextimport android.os.Buildimport android.util.Logimport androidx.core.app.NotificationCompatimport com.example.antriankesehatan.Rimport com.pusher.client.Pusherimport com.pusher.client.PusherOptionsimport com.pusher.client.connection.ConnectionEventListenerimport com.pusher.client.connection.ConnectionStateChangeimport org.json.JSONObjectobject NotificationPusher {    private const val APP_CLUSTER = "ap1"    private const val APP_KEY = "3a3bdf2bba0525e9cce4"    private const val APP_SECRET = "095340ab36628f909c32"    private const val APP_ID = "1432716"    private const val CHANNEL_ID = "123"    private const val CHANNEL_NAME = "Channel-Antrian"    fun setUpPusher(context: Context) {        val option = PusherOptions()        option.setCluster(APP_CLUSTER)        val pusher = Pusher(APP_KEY, option)        pusher.connect(object : ConnectionEventListener {            override fun onConnectionStateChange(change: ConnectionStateChange?) {                Log.d("Pusher",                    "State ${change?.previousState} => ${change?.currentState}")            }            override fun onError(message: String?, code: String?, e: java.lang.Exception?) {                Log.d("Pusher",                    "There was a problem connecting! code ($code), message ($message), exception($e)")            }        })        val channel = pusher.subscribe("broadcast")        channel.bind("berita-info") { event ->            Log.d("EVENT_PUSHER", event.data + " : " + event.eventName + " : " + event.channelName)            val jsonString = event.data            val jsonRead = JSONObject(jsonString)            val getTitle = jsonRead.getString("title")            val getBody = jsonRead.getString("body")            createNotification(context, getTitle, getBody)        }    }     fun createNotification(context: Context, title: String, body: String) {        val notificationManager =            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager        val notification: NotificationCompat.Builder =            NotificationCompat.Builder(context, CHANNEL_ID)                .setSmallIcon(R.drawable.ic_doctor)                .setContentTitle(title)                .setContentText(body)                .setAutoCancel(true)                .setPriority(NotificationCompat.PRIORITY_HIGH)                .setDefaults(NotificationCompat.DEFAULT_ALL)        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            val channel =                NotificationChannel(                    CHANNEL_ID,                    CHANNEL_NAME,                    NotificationManager.IMPORTANCE_HIGH                )            notification.setChannelId(CHANNEL_ID)            notificationManager.createNotificationChannel(channel)        }        notificationManager.notify(1000, notification.build())    }}